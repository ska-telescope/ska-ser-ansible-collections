---
# tasks file for prometheus
- name: Enable SSH forwarding for sudo
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    insertafter: '^#?\s*Defaults\s+env_keep\b'
    line: 'Defaults    env_keep += "SSH_AUTH_SOCK"'

- name: Ensure Prometheus data directory
  ansible.builtin.file:
    path: '{{ prometheus_data_dir }}'
    state: directory
    mode: 0766
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
  become: true

- name: Ensure Prometheus configuration directory
  ansible.builtin.file:
    path: '{{ prometheus_config_dir }}'
    state: directory
    mode: 0755
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
  become: true

- name: Ensure Prometheus rules configuration directory
  ansible.builtin.file:
    path: '{{ prometheus_config_dir }}/rules/'
    state: directory
    mode: 0755
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
  become: true

- name: Copy prom_helper to /usr/local/bin
  ansible.builtin.copy:
    src: "openstack/prom_helper.py"
    dest: "/usr/local/bin/prom_helper.py"
    mode: 0644
  become: true

- name: Copy grafana_helper to /usr/local/bin
  ansible.builtin.copy:
    src: "openstack/grafana_helper.py"
    dest: "/usr/local/bin/grafana_helper.py"
    mode: 0644
  become: true

- name: Ensure target directory
  ansible.builtin.file:
    path: '{{ kubectl_install_dir }}'
    state: directory
    mode: '0755'

- name: Download kubectl
  become: true
  ansible.builtin.get_url:
    url: '{{ kubectl_url }}'
    dest: '{{ kubectl_install_dir }}/{{ kubectl_name }}-{{ kubectl_version }}'
    mode: 0755

- name: Link installed kubectl # noqa ignore-errors
  become: true
  ignore_errors: true
  ansible.builtin.file:
    src: '{{ kubectl_install_dir }}/{{ kubectl_name }}-{{ kubectl_version }}'
    dest: '{{ kubectl_install_dir }}/{{ kubectl_name }}'
    state: link
    mode: 0755

- name: Create directory
  ansible.builtin.file:
    path: /etc/kubernetes/
    state: directory
    mode: 0755

- name: Copy KUBECONFIG file
  ansible.builtin.copy:
    src: "{{ kubeconfig }}"
    dest: "/etc/kubernetes/admin.conf"
    mode: 0755
  become: true

# Create prometheus sa to get bearer.token
- name: Create prometheus sa account
  ansible.builtin.command: kubectl --kubeconfig=/etc/kubernetes/admin.conf create sa prometheus -n kube-system
  register: response
  failed_when: "'already exists' not in response.stderr and 'created' not in response.stdout"
  changed_when: "'created' in response.stdout"

- name: Copy up configuration file
  ansible.builtin.copy:
    src: "prometheus_rlb.yml"
    dest: "/tmp/prometheus_rlb.yml"
    mode: 0644

- name: Create prometheus rolebinding account
  ansible.builtin.command: kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f /tmp/prometheus_rlb.yml
  register: response
  failed_when: "'unchanged' not in response.stdout and 'created' not in response.stdout"
  changed_when: "'created' in response.stdout"

- name: Get prom_secret # noqa risky-shell-pipe no-changed-when
  ansible.builtin.shell: |
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get secrets -n kube-system --output=json \
    | jq -r '.items[].metadata | select(.name|startswith("prometheus-token-")).name'
  register: prom_secret

- name: Save token in destination file # noqa no-changed-when risky-shell-pipe
  ansible.builtin.shell: |
    kubectl --kubeconfig=/etc/kubernetes/admin.conf get secret {{ prom_secret.stdout }} -n kube-system --output='json' \
    | jq -r '.data.token' | base64 --decode > {{ k8s_bearer_token }}

- name: Save kubectl credentials # noqa no-changed-when risky-shell-pipe
  ansible.builtin.shell: |
    kubectl --kubeconfig=/etc/kubernetes/admin.conf config view --raw --minify \
    --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' \
    | base64 --decode > {{ k8s_client_certificate }}

- name: Set environment variables for prom_helper
  ansible.builtin.blockinfile:
    path: /etc/environment
    block: |
      auth_url="{{ auth_url }}"
      username="{{ username }}"
      password="{{ password }}"
      project_id="{{ project_id }}"
      project_name="{{ project_name }}"
      OS_AUTH_URL="{{ auth_url }}"
      OS_USER_DOMAIN_NAME=default
      OS_PASSWORD="{{ password }}"
      OS_USERNAME="{{ username }}"
      OS_PROJECT_ID="{{ project_id }}"
      OS_PROJECT_NAME="{{ project_name }}"
      KUBECONFIG="/etc/kubernetes/admin.conf"
  become: true

- name: Install cron
  ansible.builtin.apt:
    pkg:
      - cron
    state: present
    update_cache: true

# the generated prometheus_node_metric_relabel_configs.yaml must
#  go in the playbook_dir ready to run
- name: Add cron job
  ansible.builtin.cron:
    name: relabel prometheus configs
    minute: "30"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    user: "root"
    job: >
      python3 /usr/local/bin/prom_helper.py -g &&
      mv *.json /etc/prometheus/ &&
      cp prometheus_node_metric_relabel_configs.yaml {{ playbook_dir }}/
  become: true
  tags:
    - crontab

# touch prometheus_node_metric_relabel_configs.yaml just incase it does not exist
- name: Add cron job for the playbook
  ansible.builtin.cron:
    name: touch prometheus_node_metric_relabel_configs.yaml
    minute: "0"
    hour: "4"
    day: "*"
    month: "*"
    weekday: "*"
    user: "root"
    job: >
      cd {{ playbook_dir }} &&
      touch prometheus_node_metric_relabel_configs.yaml &&
      git pull &&
      ansible-playbook deploy_prometheus.yml -i hosts --tags "cron"
      --extra-vars
      "prometheus_gitlab_ci_pipelines_exporter_token='{{ prometheus_gitlab_ci_pipelines_exporter_token }}'"
      --extra-vars "password='{{ password }}'"
      --extra-vars "slack_api_url='{{ slack_api_url }}'"
      --extra-vars "slack_api_url_user='{{ slack_api_url_user }}'"
      -e 'ansible_python_interpreter=/usr/bin/python3'
      -e @prometheus_node_metric_relabel_configs.yaml
  become: true
  tags:
    - crontab

- name: Generate Prometheus configuration
  become: true
  ansible.builtin.template:
    src: "prometheus.yml.j2"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    force: true
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
    mode: 0755

- name: Create certificates for client communication
  ansible.builtin.include_role:
    name: ska_collections.instance_common.certs
  vars:
    private_key_name: "prometheus"
    certificate_name: "prometheus"
    dns_alt_name: "{{ thanos_alt_name }}"
    certificates_recreate: true

- name: Create alerting rules file
  ansible.builtin.template:
    src: "alert.rules.j2"
    dest: "{{ prometheus_config_dir }}/rules/ansible_managed.rules"
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0755
  when:
    - prometheus_alert_rules != []

- name: Create record rules file
  ansible.builtin.template:
    src: "record.rules.j2"
    dest: "{{ prometheus_config_dir }}/rules/record.rules"
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
    mode: 0755
  when:
    - prometheus_record_rules != []

- name: Copy ceph alerting rules
  ansible.builtin.copy:
    src: "rules/ceph/ceph_dashboard.rules"
    dest: "/etc/prometheus/rules/ceph_dashboard.rules"
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
    mode: 0644

- name: Copy elasticstack alerting rules
  ansible.builtin.copy:
    src: "rules/elasticstack/elasticsearch.rules"
    dest: "/etc/prometheus/rules/elasticsearch.rules"
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
    mode: 0644

- name: Copy kubernetes alerting rules
  ansible.builtin.copy:
    src: "rules/kubernetes/{{ item }}"
    dest: "/etc/prometheus/rules/kubernetes_{{ item }}.rules"
    owner: "{{ localuser }}"
    group: "{{ localgroup }}"
    mode: 0644
  with_items:
    - prometheus_alerts.yaml
    - prometheus_rules.yaml

- name: Copy up resource files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ prometheus_config_dir }}/{{ item }}"
    mode: 0644
  with_items:
    - ceph-mgr.json
    - docker_exporter.json
    - elasticsearch_exporter.json
    - gitlab_exporter.json
    - node_exporter.json
    - kube-proxy.json

- name: Pull prometheus image {{ prometheus_docker_tags }}
  community.docker.docker_image:
    name: prom/prometheus
    tag: "{{ prometheus_docker_tags }}"
    source: pull

- name: Stop prometheus container
  community.docker.docker_container:
    name: prometheus
    stop_timeout: 180
    state: absent

- name: Generate prometheus tls configuration
  become: true
  ansible.builtin.template:
    src: "prometheus.web.config.yml.j2"
    dest: "{{ prometheus_config_dir }}/prometheus.web.config.yml"
    force: true
    owner: "{{ localuser }}"
    group: "{{ localuser }}"
    mode: 0644

- name: Start prometheus container
  community.docker.docker_container:
    name: prometheus
    image: "prom/prometheus:{{ prometheus_docker_tags }}"
    state: started
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.config.file=/etc/prometheus/prometheus.web.config.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.page-title=\"{{ prometheus_title }}\""
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url={{ prometheus_url | default('http://' + ansible_default_ipv4.address + ':9090') }}"
      - "--storage.tsdb.max-block-duration=2h"
      - "--storage.tsdb.min-block-duration=2h"
      - "--web.enable-lifecycle"
    user: root
    memory: "{{ prometheus_memory }}"
    restart: true
    restart_policy: always
    ports:
      - "9090:9090"
    volumes:
      - "{{ prometheus_config_dir }}:/etc/prometheus:ro"
      - "{{ certificates_dir }}:{{ certificates_dir }}"
      - "/etc/hosts:/etc/hosts:ro"
      - "{{ prometheus_data_dir }}:/prometheus"

- name: Check for swap file
  ansible.builtin.stat:
    path: "{{ swapfile_path }}"
  register: is_swapfile

- name: Create swap file
  ansible.builtin.command: |
    {% if swapfile_fallocate %}
    fallocate -l {{ ((swapfile_size) | int * 1024 * 1024) }} {{ swapfile_path }}
    {% else %}
    dd if=/dev/zero of={{ swapfile_path }} bs=1M count={{ swapfile_size }}
    {% endif %}
  args:
    creates: "{{ swapfile_path }}"
  register: swapfile_register_create
  when: not is_swapfile.stat.exists

- name: Set swap file permissions
  ansible.builtin.file:
    path: "{{ swapfile_path }}"
    state: "file"
    owner: "root"
    group: "root"
    mode: "0600"
  when: not is_swapfile.stat.exists

- name: Initialize swap file
  ansible.builtin.command: mkswap {{ swapfile_path }}
  when: not is_swapfile.stat.exists

- name: Enable swap file
  ansible.builtin.command: swapon {{ swapfile_path }}
  when: not is_swapfile.stat.exists

- name: Manage swap file in /etc/fstab
  ansible.posix.mount:
    src: "{{ swapfile_path }}"
    name: "none"
    fstype: "swap"
    opts: "sw,nofail"
    dump: "0"
    passno: "0"
    state: present
