#!/usr/bin/env ansible-playbook
---
- name: Show debug info
  hosts: "{{ target_hosts }}"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: "Show stack nodes info"
      ansible.builtin.debug: var=hostvars[inventory_hostname]
      when: debug

- name: Retrive stack defaults but keep the variable hierarchy
  hosts: "{{ target_hosts }}"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Retrive default values
      ansible.builtin.include_vars:
        file: "../roles/stack/defaults/main.yml"

    - name: Retrive datacenter values
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/group_vars/all.yml"

- name: Apply the common and docker roles
  hosts: "{{ target_hosts }}"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Common role
      include_role:
        name: ska_collections.instance_common.init
    - name: Docker role
      include_role:
        name: ska_collections.docker_base.docker

    - name: Certificates role
      include_role:
        name: ska_collections.instance_common.certs
      vars:
        private_key_name: "{{ inventory_hostname }}"
        certificate_name: "{{ inventory_hostname }}"
        dns_alt_name: "{{ elasticsearch_dns | default(elastic_defaults.elasticsearch_dns) }}"

- name: Verify elasticsearch cluster status
  # TODO: this differently, as master 0 might go away and the cluster still exists
  hosts: "{{ target_hosts }}-master[0]"
  vars:
    target_hosts: localhost
  tasks:
    - name: Get cluster health
      ansible.builtin.uri:
        url: http://localhost:{{ elasticsearch_api_port }}{{ elasticsearch_health_endpoint }}
        return_content: true
        status_code: [200]
      register: cluster_health
      ignore_errors: true
    - name: Print health response
      ansible.builtin.debug:
        msg: "{{ cluster_health }}"
      when: debug
    - name: Set elasticsearch_first_install fact on all hosts
      ansible.builtin.set_fact:
        elasticsearch_first_install: "{{ (cluster_health.status | default(0)) != 200 }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups[target_hosts] }}"

- name: Deploy elasticsearch to master nodes
  hosts: "{{ target_hosts }}-master"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Check installation status
      debug:
        msg: "Installing elasticsearch for the first time: {{ elasticsearch_first_install }}"
    - name: Install elasticsearch
      ansible.builtin.import_role:
        name: ska_collections.elastic.stack
        tasks_from: elastic
      vars:
        elasticsearch_node_roles: "{{ elasticsearch_default_master_roles if ((groups[target_hosts + '-data'] | default([])) | length ) > 0 else elasticsearch_default_node_roles }}"

- name: Deploy elasticsearch to data nodes
  hosts: "{{ target_hosts }}-data"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Check installation status
      debug:
        msg: "Installing elasticsearch for the first time: {{ elasticsearch_first_install }}"
    - name: Install elasticsearch
      ansible.builtin.import_role:
        name: ska_collections.elastic.stack
        tasks_from: elastic
      vars:
        elasticsearch_node_roles: "{{ elasticsearch_default_data_roles }}"

- name: Deploy HAProxy to loadbalancer nodes
  hosts: "{{ target_hosts }}-loadbalancer"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install haproxy
      ansible.builtin.import_role:
        name: ska_collections.elastic.haproxy
