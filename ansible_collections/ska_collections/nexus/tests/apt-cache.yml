#!/usr/bin/env ansible-playbook
- name: Nexus test apt package caching
  hosts: "{{ target_hosts }}"
  vars:
    target_hosts: localhost
    nexus_default_port: 8881
    api_endpoint: http://{{ hostvars[inventory_hostname].ip }}:{{ nexus_default_port }}/service/rest/v1
    apt_cache_test_package: python3-doc
    apt_cache_test_repository: "apt_proxy_ceph_clouds_archive_{{ ansible_distribution_release }}"
    apt_cache_test_repository_url: http://{{ hostvars[inventory_hostname].ip }}:{{ nexus_default_port }}/repository/{{ apt_cache_test_repository }}
  become: true
  tasks:
    - name: Check Nexus API status
      ansible.builtin.uri:
        url: "{{ api_endpoint }}/status"
        method: GET
        force: true
        return_content: true
        status_code: [200]
      register: health_info
      until: "'OK' in health_info.msg"

    - name: "Check if target repository exists: {{ apt_cache_test_repository }}"
      ansible.builtin.uri:
        url: "{{ api_endpoint }}/search?repository={{ apt_cache_test_repository }}"
        method: GET
        force: true
        return_content: true
        status_code: [200]
      register: repository_info
      until: "'OK' in health_info.msg"

    - name: "Check if test package exists: {{ apt_cache_test_package }}"
      ansible.builtin.uri:
        url: "{{ api_endpoint }}/components?repository={{ apt_cache_test_repository }}&name={{ apt_cache_test_package }}"
        method: GET
        force: true
        return_content: true
        status_code: [200]
      register: package_info

    - name: Delete test packages from cache
      ansible.builtin.uri:
        url: "{{ api_endpoint }}/components/{{ item.id }}"
        method: DELETE
        force: true
        return_content: true
        status_code: [204]
        url_username: admin
        url_password: "{{ nexus_vault_admin_password }}"
        force_basic_auth: true
      with_items: "{{ package_info.json['items'] }}"
      loop_control:
        label: "{{ item.id }}"

    - name: Update APT sources and install package
      block:
        - name: Check if APT sources exist
          ansible.builtin.stat:
            path: /etc/apt/sources.list
          register: sources_file
        - name: Backup currently configured APT sources
          ansible.builtin.copy:
            remote_src: true
            src: /etc/apt/sources.list
            dest: /etc/apt/sources.list.backup
          when: sources_file.stat.exists
        - name: Remove currently configured APT sources
          ansible.builtin.copy:
            content: |
              # empty
            dest: /etc/apt/sources.list
            force: true
        - name: Add target repository as an APT source temporarily
          ansible.builtin.apt_repository:
            repo: "deb {{ apt_cache_test_repository_url }}/ {{ ansible_distribution_release }}-updates main restricted"
            state: present
            filename: test-apt-cache
            update_cache: true
        - name: Remove test package
          ansible.builtin.apt:
            name: "{{ apt_cache_test_package }}"
            state: absent
        - name: Install test package
          ansible.builtin.apt:
            name: "{{ apt_cache_test_package }}"
            update_cache: true
            clean: true
          register: package_installation
          failed_when: 'apt_cache_test_repository_url not in package_installation.stdout'
      always:
        - name: Restore the backed up sources
          ansible.builtin.copy:
            remote_src: true
            src: /etc/apt/sources.list.backup
            dest: /etc/apt/sources.list
        - name: Remove test APT sources
          ansible.builtin.file:
            path: /etc/apt/sources.list.d/test-apt-cache.list
            state: absent
        - name: Remove APT sources backup
          ansible.builtin.file:
            path: /etc/apt/sources.list.backup
            state: absent
        - name: Update APT sources
          ansible.builtin.apt:
            update_cache: true

    - name: Check if test package was cached
      ansible.builtin.uri:
        url: "{{ api_endpoint }}/components?repository={{ apt_cache_test_repository }}&name={{ apt_cache_test_package }}"
        method: GET
        force: true
        return_content: true
        status_code: [200]
      register: package_info
      failed_when: (package_info.json['items'] | length) == 0
