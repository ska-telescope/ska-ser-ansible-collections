---
- name: Check if the nvidia driver is install
  ansible.builtin.command: nvidia-smi --query
  changed_when: false
  register: nvidia_driver_check
  ignore_errors: true

- name: Nvidia check
  ansible.builtin.debug:
    var: nvidia_driver_check.rc
  when: debug | bool

- name: Set the facts
  ansible.builtin.set_fact:
    host_grouping: "{% if 'masters' in groups and inventory_hostname in groups['masters'] %}master{% else %}worker{% endif %}"
    nvidia_driver_exists: "{{ nvidia_driver_check.rc == 0 }}"
    user_to_add: "{{ lookup('env', 'USER') }}"

- name: Check nvidia-driver installed when Nvidia support requested
  ansible.builtin.fail:
    msg: The Nvidia driver has not been found (nvidia-smi --query) - aborting.
  when: docker_activate_nvidia | bool and not docker_ignore_nvidia_fail | bool and not nvidia_driver_exists | bool

- name: Ensure that the apt cache is updated
  ansible.builtin.apt:
    update_cache: true
    update_cache_retries: 30
    update_cache_retry_max_delay: 30

- name: Remove wrong packages for Docker
  ansible.builtin.apt:
    name: "{{ docker_deb_uninstall_pkgs }}"
    force: true
    state: absent

- name: Install packages required for docker
  ansible.builtin.apt:
    name: "{{ docker_deb_dependencies }}"
    state: present

- name: Add dockerproject apt key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    state: present

- name: Add dockerproject apt source
  ansible.builtin.lineinfile:
    line: "deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    dest: /etc/apt/sources.list.d/docker.list
    create: true
    owner: root
    group: root
    mode: 0644
  register: installeddocker

- name: Ensure that the apt cache is updated
  ansible.builtin.apt:
    update_cache: true
    update_cache_retries: 30
    update_cache_retry_max_delay: 30

- name: Docker install
  ansible.builtin.include_tasks: install.yml
  loop: "{{ docker_deb_pkgs }}"

- name: "Add user to docker group {{ ansible_user }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    append: true
    groups: docker

- name: Ensure that pip is install (CentOS 7)
  community.general.easy_install:
    name: pip
    state: present
  when: ansible_distribution == "CentOS" and ansible_distribution_version is regex("^7\.")

- name: Uninstall docker dependencies pip3
  ansible.builtin.pip:
    name: ["docker-py", "docker-pycreds", "docker"]
    executable: pip3
    state: absent

- name: Uninstall docker dependencies pip - this may not exist!  # noqa ignore-errors
  ansible.builtin.pip:
    name: ["docker-py", "docker-pycreds", "docker"]
    executable: pip
    state: absent
  ignore_errors: true

- name: Install docker dependencies pip3
  ansible.builtin.pip:
    executable: pip3
    name: "{{ docker_python_pkg }}"

- name: Create /etc/systemd/system/docker.service.d
  ansible.builtin.file:
    path: "/etc/systemd/system/docker.service.d"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Configure docker server
  ansible.builtin.template:
    src: docker.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker.conf"
    mode: 0644
  notify:
    - Reload systemd
    - Restart docker

- name: Create /etc/docker
  ansible.builtin.file:
    path: "/etc/docker"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Configure docker daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: "/etc/docker/daemon.json"
    mode: 0644
  notify:
    - Reload systemd
    - Restart docker

- name: Run cadvisor container
  community.docker.docker_container:
    name: cadvisor
    image: "gcr.io/cadvisor/cadvisor:{{ docker_cadvisor_version }}"
    cpus: 0.1
    memory: 48M
    state: started
    restart: true
    restart_policy: always
    detach: true
    published_ports:
      - "9080:8080"
    command:
      - "--enable_metrics=app"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
  when:
    - docker_install_cadvisor | bool

- name: Flush those handlers
  ansible.builtin.meta: flush_handlers
