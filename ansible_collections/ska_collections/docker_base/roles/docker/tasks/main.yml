---
- name: Check if the nvidia driver is install
  ansible.builtin.command: nvidia-smi --query
  changed_when: false
  register: nvidia_driver_check
  ignore_errors: true

- name: Nvidia check
  ansible.builtin.debug: var=nvidia_driver_check.rc
  when: debug | bool

- name: Set the facts
  ansible.builtin.set_fact:
    host_grouping: "{% if 'masters' in groups and inventory_hostname in groups['masters'] %}master{% else %}worker{% endif %}"
    nvidia_driver_exists: "{{ nvidia_driver_check.rc == 0 }}"
    user_to_add: "{{ lookup('env', 'USER') }}"

- name: Check nvidia-driver installed when Nvidia support requested
  ansible.builtin.fail:
    msg: The Nvidia driver has not been found (nvidia-smi --query) - aborting.
  when: activate_nvidia | bool and not ignore_nvidia_fail | bool and not nvidia_driver_exists | bool

- name: Remove wrong packages for Docker
  ansible.builtin.apt:
    name: "{{ docker_deb_uninstall_pkgs }}"
    force: true
    state: absent

- name: Install packages required for docker
  ansible.builtin.apt:
    name: "{{ docker_deb_dependencies }}"
    state: present

- name: Add dockerproject apt key
  ansible.builtin.apt_key:
    url: "{{ docker_deb_repo_key_url }}"
    id: "{{ docker_deb_repo_key_id }}"
    state: present

- name: Add dockerproject apt source
  ansible.builtin.lineinfile:
    line: "{{ docker_deb_repo_url }}"
    dest: /etc/apt/sources.list.d/docker.list
    create: true
    owner: root
    group: root
    mode: 0644
  register: installeddocker

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true

- name: Docker install
  ansible.builtin.include_tasks: install.yml
  loop: "{{ docker_deb_pkgs }}"

- name: "Add user to docker group {{ ansible_user }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    append: true
    groups: docker

- name: Ensure that pip is install (CentOS 7)
  community.general.packaging.language.easy_install:
    name: pip
    state: present
  when: ansible_distribution == "CentOS" and ansible_distribution_version is regex("^7\.")

- name: Uninstall docker dependencies pip3
  ansible.builtin.pip:
    name: ["docker-py", "docker-pycreds", "docker"]
    executable: pip3
    state: absent

- name: Uninstall docker dependencies pip - this may not exist!  # noqa ignore-errors
  ansible.builtin.pip:
    name: ["docker-py", "docker-pycreds", "docker"]
    executable: pip
    state: absent
  ignore_errors: true

- name: Install docker dependencies pip3
  ansible.builtin.pip:
    executable: pip3
    name: docker-py

- name: Create /etc/systemd/system/docker.service.d
  ansible.builtin.file:
    path: "/etc/systemd/system/docker.service.d"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Configure docker server
  ansible.builtin.template:
    src: docker.conf.j2
    dest: "/etc/systemd/system/docker.service.d/docker.conf"
    mode: "0644"
  notify:
    - Reload systemd
    - Restart docker

- name: Create /etc/docker
  ansible.builtin.file:
    path: "/etc/docker"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Configure docker daemon
  ansible.builtin.template:
    src: daemon.json.j2
    dest: "/etc/docker/daemon.json"
    mode: "0644"
  notify:
    - Reload systemd
    - Restart docker

- name: Add cron job for docker kill containers living longer than a day
  ansible.builtin.lineinfile:
    path: /etc/crontab
    line: >-
      0 */4 * * *   root    docker ps --format='{{.ID}}'   | xargs -n 1 -r docker inspect -f '{{.ID}} {{.State.Running}} {{.State.StartedAt}}'   \
      | awk '$2 == "true" && $3 <= "'$(date -d 'yesterday' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' | xargs sudo docker kill
  become: true
  notify:
    - Restart cron

- name: Add cron job for docker system prune
  ansible.builtin.lineinfile:
    path: /etc/crontab
    regexp: 'docker system prune'
    line: >-
      30 */4     * * *   root    docker system prune -a --volumes -f
  become: true
  notify:
    - Restart cron

- name: Flush those handlers
  ansible.builtin.meta: flush_handlers
