#!/usr/bin/env ansible-playbook
---
- name: Generate certificates for mTLS
  hosts: "{{ target_hosts }}"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Generate certificates for mTLS
      ansible.builtin.import_role:
        name: ska_collections.instance_common.certs
        tasks_from: sign-cert
      vars:
        certificate_name: "{{ inventory_hostname }}"
        certificate_dns_alt_name: "{{ elasticsearch_dns_name }}"

- name: Check if elasticsearch is installed
  hosts:
    - "{{ target_hosts + '-master' }}"
    - "{{ target_hosts + '-data' }}"
  vars:
    target_hosts: localhost
    elasticsearch_nodes: "{{ (groups[target_hosts + '-master'] | default([])) + (groups[target_hosts + '-data'] | default([])) }}"
  tasks:
    - name: Get elasticsearch node status
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: elasticsearch-status

    - name: Prepare elasticsearch_first_install check
      ansible.builtin.set_fact:
        elasticsearch_first_install: true
      when: not elasticsearch_first_install is defined

    - name: Assess elasticsearch_first_install from nodes
      ansible.builtin.set_fact:
        elasticsearch_first_install: "{{ (elasticsearch_first_install and (not hostvars[item]['elasticsearch_deployed_on_node'])) | bool }}"
      with_items: "{{ elasticsearch_nodes }}"
      when: not elasticsearch_first_install is defined
  tags:
    - elasticsearch

- name: Deploy elasticsearch to master nodes
  hosts: "{{ target_hosts }}-master"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install elasticsearch
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: elasticsearch
      vars:
        elasticsearch_node_roles: "{{ elasticsearch_default_master_roles
        if ((groups[target_hosts + '-data'] | default([])) | length) > 0
        else elasticsearch_default_node_roles }}"

    - name: Install elasticsearch exporter
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: elasticsearch_exporter
  tags:
    - elasticsearch

- name: Deploy elasticsearch to data nodes
  hosts: "{{ target_hosts }}-data"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install elasticsearch
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: elasticsearch
      vars:
        elasticsearch_node_roles: "{{ elasticsearch_default_data_roles }}"

    - name: Install elasticsearch exporter
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: elasticsearch_exporter
  tags:
    - elasticsearch

- name: Deploy HAProxy to loadbalancer nodes
  hosts: "{{ target_hosts }}-loadbalancer"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install haproxy
      ansible.builtin.import_role:
        name: ska_collections.logging.haproxy
        tasks_from: install
  tags:
    - haproxy

- name: Deploy kibana to kibana nodes
  hosts: "{{ target_hosts }}-kibana"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install Kibana on Kibana-only instances
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: kibana
      vars:
        elasticsearch_address: "{{ groups[target_hosts + '-loadbalancer'][0]
        if ((groups[target_hosts + '-loadbalancer'] | default([])) | length) > 0
        else groups[target_hosts + '-master'][0] }}"
  tags:
    - kibana

- name: Deploy kibana to a master node
  hosts: "{{ target_hosts }}-master"
  vars:
    target_hosts: localhost
  become: true
  tasks:
    - name: Install kibana
      ansible.builtin.import_role:
        name: ska_collections.logging.stack
        tasks_from: kibana
      vars:
        elasticsearch_address: "{{ inventory_hostname }}"
      when: '((groups[target_hosts + "-kibana"] | default([])) | length) == 0 and inventory_hostname == groups[target_hosts + "-master"][0]'
    - name: Remove kibana if kibana only instance is present
      community.general.docker_container:
        name: "{{ kibana_name }}"
        state: absent
      when: '((groups[target_hosts + "-kibana"] | default([])) | length) > 0'
  tags:
    - kibana
