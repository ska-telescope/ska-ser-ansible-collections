---
- name: "Docker pull kibana_image"
  community.general.docker_image:
    source: pull
    name: "{{ kibana_image }}"
  register: docker_pull_retry
  until: "docker_pull_retry is not failed"
  retries: 5
  delay: 5

- name: Change certificates_dir ownership
  ansible.builtin.file:
    path: "{{ certificates_dir }}"
    mode: 0770

- name: Change private key ownership
  ansible.builtin.file:
    path: "{{ certificates_dir }}/{{ inventory_hostname }}.key"
    mode: 0640

- name: Create kibana secrets directory
  ansible.builtin.file:
    path: "{{ kibana_secrets_directory }}"
    state: directory
    mode: 0644

- name: Check if kibana encryption keys exist
  ansible.builtin.stat:
    path: "{{ kibana_secrets_file_path }}"
  register: kibana_secrets_file

- name: Create kibana encryption keys
  ansible.builtin.set_fact:
    kibana_encryption_keys:
      reporting: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
      security: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
      encryptedSavedObjects: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
  when: not kibana_secrets_file.stat.exists

- name: Store kibana encryption keys
  ansible.builtin.copy:
    content: "{{ kibana_encryption_keys | to_json }}"
    dest: "{{ kibana_secrets_file_path }}"
    mode: 0600
  when: not kibana_secrets_file.stat.exists

- name: Create custom kibana privileges role
  ansible.builtin.uri:
    url: "https://{{ hostvars[elasticsearch_address].ip }}:{{ elasticsearch_api_port }}/_security/role/{{ kibana_privileges_role }}"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    body_format: "json"
    body:
      applications: [
        {
          "application": "kibana-.kibana",
          "privileges": "{{ kibana_application_privileges }}",
          "resources": ["space:default"]
        }
      ]
    client_cert: "{{ certificates_dir }}/{{ inventory_hostname }}.crt"
    client_key: "{{ certificates_dir }}/{{ inventory_hostname }}.key"
    force: true
    method: PUT
    status_code: 200
  environment:
    SSL_CERT_FILE: "{{ certificates_dir }}/ca-certificate.crt"

- name: Create kibana user with viewer roles
  ansible.builtin.uri:
    url: "https://{{ hostvars[elasticsearch_address].ip }}:{{ elasticsearch_api_port }}/_security/user/{{ kibana_viewer_user }}"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    body_format: "json"
    body:
      password: "{{ kibana_viewer_password }}"
      enabled: true
      roles: "{{ kibana_viewer_user_roles }}"
    client_cert: "{{ certificates_dir }}/{{ inventory_hostname }}.crt"
    client_key: "{{ certificates_dir }}/{{ inventory_hostname }}.key"
    force: true
    method: POST
    status_code: 200
  environment:
    SSL_CERT_FILE: "{{ certificates_dir }}/ca-certificate.crt"

- name: Create kibana service account token
  ansible.builtin.uri:
    url: "https://{{ hostvars[elasticsearch_address].ip }}:{{ elasticsearch_api_port }}{{ elasticsearch_kibana_sa_endpoint }}/{{ inventory_hostname }}?pretty"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    client_cert: "{{ certificates_dir }}/{{ inventory_hostname }}.crt"
    client_key: "{{ certificates_dir }}/{{ inventory_hostname }}.key"
    force: true
    method: POST
    status_code: 200
    dest: "{{ kibana_service_account_path }}"
    creates: "{{ kibana_service_account_path }}"
    mode: 0600
  environment:
    SSL_CERT_FILE: "{{ certificates_dir }}/ca-certificate.crt"

- name: Get kibana service account token
  ansible.builtin.command: cat "{{ kibana_service_account_path }}"
  register: kibana_serviceaccount
  changed_when: true

- name: Get kibana secrets
  ansible.builtin.command: cat "{{ kibana_secrets_file_path }}"
  register: kibana_secrets
  changed_when: true

- name: Create kibana configuration
  ansible.builtin.template:
    src: kibana.yml.j2
    dest: /etc/kibana.yml
    mode: 0644
  vars:
    elasticsearch_kibana_token: "{{ kibana_serviceaccount.stdout | from_json | json_query('token.value') }}"
    kibana_encryption_keys: "{{ kibana_secrets.stdout | from_json }}"
  register: kibana_config

- name: "Run container {{ kibana_name }}"
  community.general.docker_container:
    name: "{{ kibana_name }}"
    network_mode: "{{ kibana_network_mode }}"
    privileged: "{{ 'yes' if kibana_network_mode == 'host' else 'no' }}"
    user: kibana
    restart_policy: always
    image: "{{ kibana_image }}"
    state: started
    labels: "{{ kibana_labels }}"
    log_driver: "{{ kibana_log_driver }}"
    log_options: "{{ kibana_log_options }}"
    volumes:
      - /etc/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - "{{ certificates_dir }}:/usr/share/kibana/config/certificates:rw"
    ports:
      - "{{ kibana_port }}:{{ kibana_port }}"
    recreate: "{{ kibana_reinstall or kibana_config.changed | bool }}"

- name: Kibana is running
  ansible.builtin.wait_for:
    host: "{{ kibana_ip }}"
    port: "{{ kibana_port | int }}"
    timeout: 120

- name: Check if kibana default data view exists
  ansible.builtin.uri:
    url: "http://{{ kibana_address }}/kibana/api/data_views/default"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    body_format: "json"
    force: true
    force_basic_auth: true
    method: GET
    status_code: 200
    headers:
      kbn-xsrf: true
  register: kibana_default_dataview
  until: kibana_default_dataview.status == 200
  retries: 6
  delay: 10

- name: Get kibana data views
  ansible.builtin.uri:
    url: "http://{{ kibana_address }}/kibana/api/data_views"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    body_format: "json"
    force: true
    force_basic_auth: true
    method: GET
    status_code: 200
    headers:
      kbn-xsrf: true
  register: kibana_dataviews

- name: Create new kibana data view
  ansible.builtin.uri:
    url: "http://{{ kibana_address }}/kibana/api/data_views/data_view"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    body_format: "json"
    body:
      data_view: "{{ kibana_dataview_config }}"
    force: true
    force_basic_auth: true
    return_content: true
    method: POST
    status_code: 200
    headers:
      kbn-xsrf: true
  vars:
    kibana_dataviews_names: "{{ kibana_dataviews.json | json_query('data_view[*].name') }}"
  when: 'kibana_default_dataview_name not in kibana_dataviews_names'
  register: kibana_dataview_create

- name: Set kibana default data view
  ansible.builtin.uri:
    url: "http://{{ kibana_address }}/kibana/api/data_views/default"
    url_username: elastic
    url_password: "{{ elasticsearch_password }}"
    client_cert: "{{ certificates_dir }}/{{ inventory_hostname }}.crt"
    client_key: "{{ certificates_dir }}/{{ inventory_hostname }}.key"
    body_format: "json"
    body:
      data_view_id: "{{ kibana_dataview_create.json.data_view.id }}"
      force: true
    force: true
    force_basic_auth: true
    method: POST
    status_code: 200
    headers:
      kbn-xsrf: true
  environment:
    SSL_CERT_FILE: "{{ certificates_dir }}/ca-certificate.crt"
  vars:
    kibana_dataviews_names: "{{ kibana_dataviews.json | json_query('data_view[*].name') }}"
  when: 'not (kibana_dataview_create.skipped | default(false))'
