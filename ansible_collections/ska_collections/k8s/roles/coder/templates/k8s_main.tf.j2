terraform {
  required_providers {
    coder = {
      source  = "coder/coder"
      version = "~> 0.7.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.18"
    }
  }
}

provider "coder" {
  feature_use_managed_variables = true
}

variable "use_kubeconfig" {
  type        = bool
  description = <<-EOF
  Use host kubeconfig? (true/false)

  Set this to false if the Coder host is itself running as a Pod on the same
  Kubernetes cluster as you are deploying workspaces to.

  Set this to true if the Coder host is running outside the Kubernetes cluster
  for workspaces.  A valid "~/.kube/config" must be present on the Coder host.
  EOF
  default     = false
}

variable "namespace" {
  type        = string
  description = "The Kubernetes namespace to create workspaces in (must exist prior to creating workspaces)"
}

locals {
  jupyter_base_path = "/@${data.coder_workspace.me.owner}/${data.coder_workspace.me.name}/apps/jupyter/"
}

data "coder_parameter" "cpu" {
  name         = "cpu"
  display_name = "CPU"
  description  = "The number of CPU cores"
  default      = "2"
  icon         = "/icon/memory.svg"
  mutable      = true
  option {
    name  = "2 Cores"
    value = "2"
  }
}

data "coder_parameter" "memory" {
  name         = "memory"
  display_name = "Memory"
  description  = "The amount of memory in GB"
  default      = "2"
  icon         = "/icon/memory.svg"
  mutable      = true
  option {
    name  = "2 GB"
    value = "2"
  }
  option {
    name  = "4 GB"
    value = "4"
  }
}

data "coder_parameter" "home_disk_size" {
  name         = "home_disk_size"
  display_name = "Home disk size"
  description  = "The size of the home disk in GB"
  default      = "2"
  type         = "number"
  icon         = "/emojis/1f4be.png"
  mutable      = false
  validation {
    min = 1
    max = 10
  }
}

data "coder_parameter" "coder_dev_namespace" {
  name         = "coder_dev_namespace"
  display_name = "Kubernetes namespace"
  description  = "Name of the k8s namespace to inspect"
  default      = "integration-ska-tango-examples"
  type         = "string"
  icon         = "/icon/k8s.png"
  mutable      = false
}

provider "kubernetes" {
  # Authenticate via ~/.kube/config or a Coder-specific ServiceAccount, depending on admin preferences
  config_path = var.use_kubeconfig == true ? "~/.kube/config" : null
}

data "coder_workspace" "me" {}

resource "coder_agent" "main" {
  os                     = "linux"
  arch                   = "amd64"
  startup_script_timeout = 180
  startup_script         = <<-EOT
    set -e

    code-server --auth none --port 13337 >/tmp/code-server.log 2>&1 &

    jupyter lab --ServerApp.base_url=${local.jupyter_base_path} --ServerApp.token='' --ip='*' >/tmp/jupyter.log 2>&1 &
  EOT
}

# code-server
resource "coder_app" "code-server" {
  agent_id     = coder_agent.main.id
  slug         = "code-server"
  display_name = "code-server"
  icon         = "/icon/code.svg"
  url          = "http://localhost:13337?folder=/home/tango"
  subdomain    = false
  share        = "owner"

  healthcheck {
    url       = "http://localhost:13337/healthz"
    interval  = 3
    threshold = 10
  }
}

resource "coder_app" "jupyter" {
  agent_id     = coder_agent.main.id
  display_name = "JupyterLab"
  slug         = "jupyter"
  url          = "http://localhost:8888${local.jupyter_base_path}"
  icon         = "/icon/jupyter.svg"
  subdomain = false

  healthcheck {
    url       = "http://localhost:8888/healthz"
    interval  = 5
    threshold = 10
  }
}

resource "kubernetes_persistent_volume_claim" "home" {
  metadata {
    name      = "coder-${lower(data.coder_workspace.me.owner)}-${lower(data.coder_workspace.me.name)}-home"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
    labels = {
      "app.kubernetes.io/name"     = "coder-pvc"
      "app.kubernetes.io/instance" = "coder-pvc-${lower(data.coder_workspace.me.owner)}-${lower(data.coder_workspace.me.name)}"
      "app.kubernetes.io/part-of"  = "coder"
      // Coder specific labels.
      "com.coder.resource"       = "true"
      "com.coder.workspace.id"   = data.coder_workspace.me.id
      "com.coder.workspace.name" = data.coder_workspace.me.name
      "com.coder.user.id"        = data.coder_workspace.me.owner_id
      "com.coder.user.username"  = data.coder_workspace.me.owner
    }
    annotations = {
      "com.coder.user.email" = data.coder_workspace.me.owner_email
    }
  }
  wait_until_bound = false
  spec {
    access_modes = ["ReadWriteOnce"]
    storage_class_name = "nfss1"
    resources {
      requests = {
        storage = "${data.coder_parameter.home_disk_size.value}Gi"
      }
    }
  }
}

resource "kubernetes_service_account" "coder_dev_sa" {
  metadata {
    name = "${data.coder_parameter.coder_dev_namespace.value}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
  }
}

resource "kubernetes_role" "coder_dev_role" {
  metadata {
    name = "${data.coder_parameter.coder_dev_namespace.value}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
  }

  rule {
    api_groups = ["", "batch", "apps"]
    resources  = ["deployments", "jobs", "pods", "pods/log", "pods/exec", "configmaps",
              "pods/portforward", "pods/attach", "persistentvolumeclaims", "services", "secrets",
              "endpoints", "events", "podtemplates", "replicationcontrollers",
              "daemonsets", "replicasets", "statefulsets", "cronjobs"]
    verbs      = ["get", "list", "watch"]
  }
}

  
resource "kubernetes_role_binding" "coder_role_binding" {
  metadata {
    name = "${data.coder_parameter.coder_dev_namespace.value}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
  }
  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "Role"
    name      = "${data.coder_parameter.coder_dev_namespace.value}"
  }
  subject {
    kind      = "ServiceAccount"
    name      = "${data.coder_parameter.coder_dev_namespace.value}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
  }
}

resource "kubernetes_network_policy" "pod_np" {
  metadata {
    name      = "nf-${lower(data.coder_workspace.me.owner)}-${lower(data.coder_workspace.me.name)}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
  }

  spec {
    pod_selector {
      match_expressions {
        key      = "com.coder.workspace.name"
        operator = "In"
        values   = ["${lower(data.coder_workspace.me.name)}"]
      }
    }

    ingress {
      ports {
        port     = "13337"
        protocol = "TCP"
      }

      ports {
        port     = "2113"
        protocol = "TCP"
      }

      ports {
        port     = "2112"
        protocol = "TCP"
      }

      ports {
        port     = "6060"
        protocol = "TCP"
      }
      
      ports {
        port     = "8888"
        protocol = "TCP"
      }

      ports {
        port     = "58689"
        protocol = "TCP"
      }

      ports {
        port     = "37649"
        protocol = "TCP"
      }

      from {
        namespace_selector {
          match_labels = {
            "kubernetes.io/metadata.name" = "{{ k8s_coder_namespace }}"
          }
        }
      }
    }

    egress {
      ports {
        protocol = "UDP"
        port     = "53"
      }

      to {
        pod_selector {
          match_labels = {
            k8s-app = "kube-dns"
          }
        }

        namespace_selector {
          match_labels = {
            "kubernetes.io/metadata.name" = "kube-system"
          }
        }
      }
    }

    egress {
      ports {
        protocol = "TCP"
        port     = "443"
      }
    }

    egress {
      ports {
        protocol = "TCP"
        port     = "8080"
      }

      to {
        namespace_selector {
          match_labels = {
            "kubernetes.io/metadata.name" = "coder"
          }
        }
      }
    }

    egress {
      ports {
        protocol = "TCP"
        port     = "6443"
      }
    }


    egress {

      ports {
        port     = "5678"
        protocol = "TCP"
      }

      ports {
        port     = "10000"
        protocol = "TCP"
      }

      ports {
        port     = "45450"
        protocol = "TCP"
      }

      ports {
        port     = "45460"
        protocol = "TCP"
      }

      ports {
        port     = "45470"
        protocol = "TCP"
      }

      to {
        namespace_selector {
          match_labels = {
            "kubernetes.io/metadata.name" = "${data.coder_parameter.coder_dev_namespace.value}"
          }
        }
      }
    }

    policy_types = ["Ingress", "Egress"]
  }
}

resource "kubernetes_pod" "main" {
  count = data.coder_workspace.me.start_count
  metadata {
    name      = "coder-${lower(data.coder_workspace.me.owner)}-${lower(data.coder_workspace.me.name)}"
    namespace = "${data.coder_parameter.coder_dev_namespace.value}"
    labels = {
      "app.kubernetes.io/name"     = "coder-workspace"
      "app.kubernetes.io/instance" = "coder-workspace-${lower(data.coder_workspace.me.owner)}-${lower(data.coder_workspace.me.name)}"
      "app.kubernetes.io/part-of"  = "coder"
      // Coder specific labels.
      "com.coder.resource"       = "true"
      "com.coder.workspace.id"   = data.coder_workspace.me.id
      "com.coder.workspace.name" = data.coder_workspace.me.name
      "com.coder.user.id"        = data.coder_workspace.me.owner_id
      "com.coder.user.username"  = data.coder_workspace.me.owner
    }
    annotations = {
      "com.coder.user.email" = data.coder_workspace.me.owner_email
    }
  }
  spec {
    service_account_name = "${data.coder_parameter.coder_dev_namespace.value}"
    security_context {
      run_as_user = "1000"
      fs_group    = "1000"
    }
    container {
      name              = "dev"
      image             = "{{ k8s_coder_dev_image }}"
      image_pull_policy = "IfNotPresent"
      command           = ["sh", "-c", coder_agent.main.init_script]
      security_context {
        run_as_user = "1000"
      }
      env {
        name  = "CODER_AGENT_TOKEN"
        value = coder_agent.main.token
      }
      resources {
        requests = {
          "cpu"    = "250m"
          "memory" = "512Mi"
        }
        limits = {
          "cpu"    = "${data.coder_parameter.cpu.value}"
          "memory" = "${data.coder_parameter.memory.value}Gi"
        }
      }
      volume_mount {
        mount_path = "/home/tango"
        name       = "home"
        read_only  = false
      }
    }

    volume {
      name = "home"
      persistent_volume_claim {
        claim_name = kubernetes_persistent_volume_claim.home.metadata.0.name
        read_only  = false
      }
    }


    affinity {
      pod_anti_affinity {
        // This affinity attempts to spread out all workspace pods evenly across
        // nodes.
        preferred_during_scheduling_ignored_during_execution {
          weight = 1
          pod_affinity_term {
            topology_key = "kubernetes.io/hostname"
            label_selector {
              match_expressions {
                key      = "app.kubernetes.io/name"
                operator = "In"
                values   = ["coder-workspace"]
              }
            }
          }
        }
      }
    }
  }
}