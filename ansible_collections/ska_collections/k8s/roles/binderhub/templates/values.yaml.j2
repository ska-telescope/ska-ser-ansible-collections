
{% if k8s_binderhub_image is not none %}
image:
  name: "{{ k8s_binderhub_image.name }}"
  tag: "{{ k8s_binderhub_image.tag }}"
{% endif %}

registry:
  url: "{{ k8s_binderhub_oci_registry_host_full_url }}"
  username: "{{ k8s_binderhub_oci_registry_username }}"
  password: "{{ k8s_binderhub_oci_registry_password }}"

pdb:
  enabled: true
  maxUnavailable: 1
  minAvailable:

replicas: 1

resources:
  requests:
    cpu: 0.2
    memory: 512Mi

rbac:
  enabled: true

config:
  BinderHub:
    use_registry: true
    image_prefix: "{{ k8s_binderhub_oci_registry_host }}/binderhub/ska-jupy-"
{% if k8s_binderhub_singleuser %}
    auth_enabled: false
{% else %}
    auth_enabled: true
{% endif %}
    hub_url: "{{ k8s_binderhub_transport }}://{{ k8s_external_dns_entry }}/{{ k8s_binderhub_namespace }}/jupyterhub/"
    hub_url_local: "{{ k8s_binderhub_transport }}://proxy-public/{{ k8s_binderhub_namespace }}/jupyterhub/"
    base_url: "/{{ k8s_binderhub_namespace }}/"
  DockerRegistry:
    token_url: "{{ k8s_binderhub_oci_registry_host_full_url }}/v2/token?service="

# https://binderhub.readthedocs.io/en/latest/https.html
service:
  type: ClusterIP

ingress:
  enabled: true
  https:
{% if k8s_binderhub_transport == 'http' %}
    enabled: false
{% else %}
    enabled: true
{% endif %}
  hosts: []
  ingressClassName:
  pathSuffix: "{{ k8s_binderhub_namespace }}"
  pathType: Prefix
  annotations:
    kubernetes.io/ingress.class: nginx

jupyterhub:
  proxy:
    service:
      type: ClusterIP
  imagePullSecret:
    create: true
    automaticReferenceInjection: true
    registry: "{{ k8s_binderhub_oci_registry_host_full_url }}"
    username: "{{ k8s_binderhub_oci_registry_username }}"
    password: "{{ k8s_binderhub_oci_registry_password }}"
  custom:
    cors: {}
  cull:
    enabled: true
    users: true # cull authenticated users too
    timeout: 7200
  hub:
    redirectToServer: false
    baseUrl: "/{{ k8s_binderhub_namespace }}/jupyterhub"
    allowNamedServers: true
    namedServerLimitPerUser: {{ k8s_binderhub_jupyterhub_named_server_limit_per_user }}
    db:
      pvc:
        storageClassName: nfss1

    config:
{% if k8s_binderhub_singleuser %}
      JupyterHub:
        authenticator_class: nullauthenticator.NullAuthenticator
{% endif %}
      BinderSpawner:
{% if k8s_binderhub_singleuser %}
        auth_enabled: false
{% else %}
        auth_enabled: true

      AzureAdOAuthenticator:
        client_id: "{{ k8s_binderhub_azuread_client_id }}"
        client_secret: "{{ k8s_binderhub_azuread_client_secret }}"
        oauth_callback_url: "{{ k8s_binderhub_jupyterhub_callback_url }}"
        tenant_id: "{{ k8s_binderhub_azuread_tenant_id }}"
      JupyterHub:
        authenticator_class: azuread
    services:
      binder:
        oauth_no_confirm: true
        oauth_redirect_uri: "{{ k8s_binderhub_callback_url }}"
        oauth_client_id: "{{ k8s_binderhub_azuread_client_id }}"
        admin: true
{% endif %}

    loadRoles:
      binder:
        services:
          - binder
        scopes:
          - servers
          # we don't need admin:users if auth is not enabled!
          - "admin:users"

    extraConfig:
      hub_extra: |
        c.JupyterHub.redirect_to_server = False

      0-binderspawnermixin: |
        """
        Helpers for creating BinderSpawners
        FIXME:
        This file is defined in binderhub/binderspawner_mixin.py
        and is copied to helm-chart/binderhub/values.yaml
        by ci/check_embedded_chart_code.py
        The BinderHub repo is just used as the distribution mechanism for this spawner,
        BinderHub itself doesn't require this code.
        Longer term options include:
        - Move BinderSpawnerMixin to a separate Python package and include it in the Z2JH Hub
          image
        - Override the Z2JH hub with a custom image built in this repository
        - Duplicate the code here and in binderhub/binderspawner_mixin.py
        """
        from tornado import web
        from traitlets import Bool, Unicode
        from traitlets.config import Configurable
        class BinderSpawnerMixin(Configurable):
            """
            Mixin to convert a JupyterHub container spawner to a BinderHub spawner
            Container spawner must support the following properties that will be set
            via spawn options:
            - image: Container image to launch
            - token: JupyterHub API token
            """
            def __init__(self, *args, **kwargs):
                # Is this right? Is it possible to having multiple inheritance with both
                # classes using traitlets?
                # https://stackoverflow.com/questions/9575409/calling-parent-class-init-with-multiple-inheritance-whats-the-right-way
                # https://github.com/ipython/traitlets/pull/175
                super().__init__(*args, **kwargs)
            auth_enabled = Bool(
                False,
                help="""
                Enable authenticated binderhub setup.
                Requires `jupyterhub-singleuser` to be available inside the repositories
                being built.
                """,
                config=True,
            )
            cors_allow_origin = Unicode(
                "",
                help="""
                Origins that can access the spawned notebooks.
                Sets the Access-Control-Allow-Origin header in the spawned
                notebooks. Set to '*' to allow any origin to access spawned
                notebook servers.
                See also BinderHub.cors_allow_origin in binderhub config
                for controlling CORS policy for the BinderHub API endpoint.
                """,
                config=True,
            )
            def get_args(self):
                if self.auth_enabled:
                    args = super().get_args()
                else:
                    args = [
                        "--ip=0.0.0.0",
                        f"--port={self.port}",
                        f"--NotebookApp.base_url={self.server.base_url}",
                        f"--NotebookApp.token={self.user_options['token']}",
                        "--NotebookApp.trust_xheaders=True",
                    ]
                    if self.default_url:
                        args.append(f"--NotebookApp.default_url={self.default_url}")
                    if self.cors_allow_origin:
                        args.append("--NotebookApp.allow_origin=" + self.cors_allow_origin)
                    # allow_origin=* doesn't properly allow cross-origin requests to single files
                    # see https://github.com/jupyter/notebook/pull/5898
                    if self.cors_allow_origin == "*":
                        args.append("--NotebookApp.allow_origin_pat=.*")
                    args += self.args
                return args
            def start(self):
                if not self.auth_enabled:
                    if "token" not in self.user_options:
                        raise web.HTTPError(400, "token required")
                    if "image" not in self.user_options:
                        raise web.HTTPError(400, "image required")
                if "image" in self.user_options:
                    self.image = self.user_options["image"]
                return super().start()
            def get_env(self):
                env = super().get_env()
                if "repo_url" in self.user_options:
                    env["BINDER_REPO_URL"] = self.user_options["repo_url"]
                for key in (
                    "binder_ref_url",
                    "binder_launch_host",
                    "binder_persistent_request",
                    "binder_request",
                ):
                    if key in self.user_options:
                        env[key.upper()] = self.user_options[key]
                return env
      00-binder: |
        # image & token are set via spawn options
        from kubespawner import KubeSpawner
        class BinderSpawner(BinderSpawnerMixin, KubeSpawner):
            pass
        c.JupyterHub.spawner_class = BinderSpawner

    services:
      binder:
        display: false

    resources:
      requests:
        cpu: 100m     # 100m = 0.1 CPU
        memory: 128Mi # 128Mi = 0.125 GB mem
        ephemeral-storage: 512Mi
      limits:
        cpu: 200m     # 200m = 0.2 CPU
        memory: 256Mi # 256Mi = 0.25 GB mem
        ephemeral-storage: 1Gi

  singleuser:
    # start notebook server with lab ui as default
    # *if available*
    cmd:
      - python3
      - "-c"
      - |
        import os
        import sys
        try:
            import jupyterlab
            major = int(jupyterlab.__version__.split(".", 1)[0])
        except Exception:
            have_lab = False
        else:
            have_lab = major >= 3
        if have_lab and "NotebookApp.default_url" not in " ".join(sys.argv):
            # if recent-enough lab is available, make it the default UI
            sys.argv.insert(1, "--NotebookApp.default_url=/lab/")
        # launch the notebook server
        os.execvp("jupyter-notebook", sys.argv)
    events: true
    memory:
      limit: 2G
      guarantee: 2G
    cpu:
      limit: 1
      guarantee: 1
    storage:
      type: dynamic
      dynamic:
        storageClass: nfss1
        pvcNameTemplate: claim-{userid}-{servername}
        volumeNameTemplate: vol-{userid}-{servername}
      capacity: 2Gi
      homeMountPath: /home/jovyan/data

  prePuller:
    hook:
      enabled: false
    continuous:
      enabled: false

  ingress:
    enabled: true
    pathSuffix: "(.*)"
    pathType: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
