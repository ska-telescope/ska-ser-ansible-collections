
registry:
  url: "{{ k8s_binderhub_oci_registry_host_full_url }}"
  username: "{{ k8s_binderhub_oci_registry_username }}"
  password: "{{ k8s_binderhub_oci_registry_password }}" 

pdb:
  enabled: true
  maxUnavailable: 1
  minAvailable:

replicas: 1

resources:
  requests:
    cpu: 0.2
    memory: 512Mi

rbac:
  enabled: true
  
config:
  BinderHub:
    cors_allow_origin: '*'
    image_prefix: "{{ k8s_binderhub_oci_registry_host }}/binderhub/ska-jupy-"
{% if k8s_binderhub_singleuser %}
    auth_enabled: false
{% else %}
    auth_enabled: true
{% endif %}
    hub_url: "{{ k8s_binderhub_transport }}://{{ k8s_external_dns_entry }}/{{ k8s_binderhub_namespace }}/jupyterhub/"
    hub_url_local: "{{ k8s_binderhub_transport }}://proxy-public/{{ k8s_binderhub_namespace }}/jupyterhub/"
    base_url: "/{{ k8s_binderhub_namespace }}/"
    build_node_selector: {}
    use_registry: true
  KubernetesBuildExecutor: {}
  DockerRegistry:
    token_url: "{{ k8s_binderhub_oci_registry_host_full_url }}/v2/token?service="

# https://binderhub.readthedocs.io/en/latest/https.html
service:
  type: ClusterIP

ingress:
  enabled: true
  https:
{% if k8s_binderhub_transport == 'http' %}
    enabled: false
{% else %}
    enabled: true
{% endif %}
  pathSuffix: "{{ k8s_binderhub_namespace }}"
  pathType: Prefix
  annotations:
    kubernetes.io/ingress.class: nginx

jupyterhub:
  proxy:
    service:
      type: ClusterIP
  imagePullSecret:
    create: true
    automaticReferenceInjection: true
    registry: "{{ k8s_binderhub_oci_registry_host_full_url }}"
    username: "{{ k8s_binderhub_oci_registry_username }}"
    password: "{{ k8s_binderhub_oci_registry_password }}"
  custom:
    cors: {}
  cull:
    enabled: true
    users: true # cull authenticated users too
  hub:
    image:
      tag: {{ k8s_binderhub_jupyterhub_image_version }}
    redirectToServer: false
    baseUrl: "/{{ k8s_binderhub_namespace }}/jupyterhub"
{% if k8s_binderhub_singleuser %}
    allowNamedServers: false
{% else %}
    allowNamedServers: true
{% endif %}
    namedServerLimitPerUser: {{ k8s_binderhub_jupyterhub_named_server_limit_per_user }}
    db:
      pvc:
        storageClassName: nfss1
    config:
{% if k8s_binderhub_singleuser %}
      JupyterHub:
        authenticator_class: jupyterhub.auth.DummyAuthenticator
      BinderSpawner:
        auth_enabled: false
        cors_allow_origin: "*"
{% elif k8s_binderhub_azuread_enabled %}
      BinderSpawner:
        auth_enabled: true
        cors_allow_origin: "*"
      JupyterHub:
        authenticator_class: azuread
      AzureAdOAuthenticator:
        client_id: "{{ k8s_binderhub_azuread_client_id }}"
        client_secret: "{{ k8s_binderhub_azuread_client_secret }}"
        oauth_callback_url: "{{ k8s_binderhub_jupyterhub_callback_url }}"
        tenant_id: "{{ k8s_binderhub_azuread_tenant_id }}"
    services:
      binder:
        oauth_redirect_uri: "{{ k8s_binderhub_callback_url }}"
        oauth_client_id: service-binderhub
{% else %}
      BinderSpawner:
        auth_enabled: true
        cors_allow_origin: "*"
      JupyterHub:
        authenticator_class: gitlab
      GitLabOAuthenticator:
        allowed_gitlab_groups: {{ k8s_binderhub_gitlab_allowed_groups }}
        client_id: "{{ k8s_binderhub_gitlab_client_id }}"
        client_secret: "{{ k8s_binderhub_gitlab_client_secret }}"
        oauth_callback_url: "{{ k8s_binderhub_jupyterhub_callback_url }}"
        create_system_users: true
    services:
      binder:
        oauth_redirect_uri: "{{ k8s_binderhub_callback_url }}"
        oauth_client_id: service-binderhub
{% endif %}
    loadRoles:
      user:
        scopes:
          - self
          - "access:services"
{% if k8s_binderhub_singleuser %}
          - "access:servers"

    extraConfig:
      binder: |
        from kubespawner import KubeSpawner

        class BinderSpawner(KubeSpawner):
          def start(self):
            if 'image' in self.user_options:
              # binder service sets the image spec via user options
              self.image = self.user_options['image']
            return super().start()
        c.JupyterHub.spawner_class = BinderSpawner
{% endif %}

    resources:
      requests:
        cpu: 100m     # 100m = 0.1 CPU
        memory: 128Mi # 128Mi = 0.125 GB mem
        ephemeral-storage: 512Mi
      limits:
        cpu: 200m     # 200m = 0.2 CPU
        memory: 256Mi # 256Mi = 0.25 GB mem
        ephemeral-storage: 1Gi
  singleuser:
    # start jupyterlab server *if available*
    # fallback on jupyter-notebook
    cmd: jupyterhub-singleuser
    memory:
      limit: 2G
      guarantee: 2G
    cpu:
      limit: 1
      guarantee: 1
    storage:
      type: dynamic
      dynamic:
        storageClass: nfss1
        pvcNameTemplate: claim-{userid}-{servername}
        volumeNameTemplate: vol-{userid}-{servername}
      capacity: 2Gi
      homeMountPath: /home/jovyan/data

  # Explicitly enable egress traffic to Kubernetes services of type ClusterIP
  # required to make it possible to talk to Tango
    networkPolicy:
      egressAllowRules:
        privateIPs: true

  ingress:
    enabled: true
    pathSuffix: "(.*)"
    pathType: Prefix
    annotations:
      kubernetes.io/ingress.class: nginx
