---

# Multus is a CNI "metaplugin", which allows pods to have multiple network attachments.
# It detects the current (Calico) CNI configuration and configures that as a static
# "delegate" plugin. Other delegates are configured by creating NetworkAttachmentDefinitions,
# and associating them with Pods via the "k8s.v1.cni.cncf.io/networks" annotation.
- name: Install Multus CNI
  kubernetes.core.k8s:
    template: "multus-daemonset-thick-plugin.yml"

# Whereabouts is an IPAM CNI plugin that assigns IP addresses from cluster-scoped pools.
# The IP range for a particular network is defined as part of the network's CNI config,
# usually in a NetworkAttachmentDefinition. Think of whereabouts as a kind of mesh DHCP.
# Read more at https://github.com/k8snetworkplumbingwg/whereabouts
- name: Install whereabouts IPAM CNI
  kubernetes.core.helm:
    atomic: true
    name: whereabouts
    chart_ref: oci://registry-1.docker.io/bitnamicharts/whereabouts
    chart_version: "0.4.1"
    release_namespace: kube-system
    values: |
      {{
        {'tolerations': [{'operator': 'Exists'}]}
        | ansible.builtin.combine(multihoming_whereabouts_values)
      }}

# SR-IOV CNI is a CNI plugin that handles attaching SR-IOV virtual functions to pods.
# Similar to the host-device CNI plugin, but with a bit of extra VF sauce. In fact
# host-device works fine to move VF network interfaces into Pods, but sriov-cni offers
# more features and configurability.
- name: Install SR-IOV CNI
  kubernetes.core.k8s:
    template: "sriov-cni-daemonset.yaml"

# This is the ConfigMap that configures the selectors that the SR-IOV device plugin
# will use to work out which devices to advertise on each node.
- name: Create ConfigMap for SR-IOV device plugin
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'sriovdp-configMap.yaml.j2') | from_yaml }}"

# Find all the nodes with the "sriov_dp_resource_list" var defined, and add a label to
# them all. We'll then use this label as a nodeSelector for the SR-IOV device plugin.
- name: Add node labels for SR-IOV nodes
  tags: label_sriov_nodes
  kubernetes.core.k8s:
    state: patched
    kind: Node
    name: "{{ item }}"
    definition:
      metadata:
        labels:
          skao.int/sriov-device-plugin: "true"
  loop: "{{ hostvars | dict2items | selectattr('value.sriov_dp_resource_list', 'defined') | map(attribute='key') }}"

# This runs as a DaemonSet on each host which has a sriov_dp_resource_list var defined.
# It inspects the host, then uses the selectors configured in its ConfigMap to work out
# which devices should be advertised as extended resources on the node.
- name: Install SR-IOV Network Device Plugin
  kubernetes.core.k8s:
    template: "sriovdp-daemonset.yaml"

# This admission controller looks for Pods with k8s.v1.cni.cncf.io/networks annotations
# and patches them based on annotations of the requested NetworkAttachmentDefinition.
#
# Notably:
#   - if the net-att-def has a k8s.v1.cni.cncf.io/resourceName annotation,
#     NRI will add a corresponding extended resource request to the Pod.
#   - if the net-att-def has a k8s.v1.cni.cncf.io/nodeSelector annotation,
#     NRI will apply that nodeSelector to the Pod.
#
# See https://github.com/k8snetworkplumbingwg/network-resources-injector for more info.
- name: Install the Network Resources Injector
  kubernetes.core.k8s:
    template: "network-resources-injector-{{ item }}.yaml"
  loop:
    - auth
    - server

# NetworkAttachmentDefinitions define the CNI configurations that are available to pods
# to select via the "k8s.v1.cni.cncf.io/networks" annotation. Each net-att-def may bed
# associated with a specific extended resource via its "k8s.v1.cni.cncf.io/resourceName"
# annotation. When Multus encounters a pod with the network annotation, it inspects the
# corresponding net-att-def to see if it has an associated resourceName. If it does, it
# inspects the resources allocated to the pod via the kubelet pod resources API, and if
# a resource of that type has been allocated to the pod, passes its deviceID to the
# CNI plugin so that it knows which device to attach. Whew, what a ride!
#
# This task expects a multihoming_network_defs var to be a dict where keys are network
# names, and the values are a dict with the following fields:
#   - "config", a standard CNI config but with "name" and "cniVersion" optional
#   - "annotations", k8s annotations to be added to the NetworkAttachmentDefinition
#
# Example:
#
# multihoming_network_defs:
#   my-second-network:
#    annotations:
#      k8s.v1.cni.cncf.io/nodeSelector: kubernetes.io/hostname=minikube
#    config:
#      type: macvlan
#      master: eth0
#      ipam:
#        type: whereabouts
#        range: 10.0.10.4-10.0.10-32/24
- name: create NetworkAttachmentDefinitions
  kubernetes.core.k8s:
    name: "{{ item.key }}"
    namespace: kube-system
    definition:
      apiVersion: k8s.cni.cncf.io/v1
      kind: NetworkAttachmentDefinition
      metadata:
        annotations: "{{ item.value.annotations | default(omit) }}"
      spec:
        config: |
          {{
            {'name': item.key, 'cniVersion': multihoming_default_cni_version}
            | ansible.builtin.combine(item.value.config)
            | to_json(indent=4)
          }}
  loop: "{{ multihoming_network_defs|dict2items }}"
