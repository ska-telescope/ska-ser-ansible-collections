---
- name: Begin volume mounting process
  ansible.builtin.debug:
    msg: "{{ volume }}"
  when: debug

- name: Check if device-by-id exists
  ansible.builtin.stat:
    path: "/dev/disk/by-id/virtio-{{ volume.id[:20] }}"
  register: device_by_id

- name: Set volume block device
  ansible.builtin.set_fact:
    device: "{{ device_by_id.stat.exists | ternary(device_by_id.stat.lnk_source, volume.device) }}"

- name: Check if volume is already mounted
  ansible.builtin.command: /bin/mountpoint -q {{ volume.mount_point }}
  ignore_errors: true
  register: is_mounted
  changed_when: "is_mounted.rc != 0"

- name: Format and mount volume
  when: is_mounted.rc != 0
  block:
    - name: Format volume
      community.general.filesystem:
        fstype: "{{ volume.file_system }}"
        dev: "{{ device }}"
    - name: Get volume UUID
      ansible.builtin.command: lsblk {{ device }} -no UUID
      register: uuid
      changed_when: false
    - name: Create mounting directory
      ansible.builtin.file:
        path: "{{ volume.mount_point }}"
        state: directory
        mode: 0755
    - name: Mount volume
      ansible.posix.mount:
        name: "{{ volume.mount_point }}"
        src: "UUID={{ uuid.stdout }}"
        opts: defaults,noatime
        dump: "0"
        passno: "0"
        fstype: "{{ volume.file_system }}"
        state: mounted
