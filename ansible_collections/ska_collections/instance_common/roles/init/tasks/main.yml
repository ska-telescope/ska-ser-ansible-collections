---

- name: Ensure that the apt cache is updated
  apt:
    update_cache: true
  register: apt_res
  retries: 30
  delay: 30
  until: apt_res is success

- name: Set hostnames
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname == "localhost" and change_hostnames
  become: true


- name: update /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '{{ ansible_default_ipv4.address }} .*{{ inventory_hostname }}'
    line: "{{ ansible_default_ipv4.address }} {{ inventory_hostname }}"
    state: present
  when: not inventory_hostname == "localhost"
  register: updatehosts
  become: true


- name: update /etc/hosts others
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ hostvars[item].inventory_hostname }}.*'
    line: "{{ hostvars[item].ip }} {{ hostvars[item].inventory_hostname }}"
    state: present
  with_items: '{{ groups[target_hosts] }}'
  when: not item == "localhost"
  register: updatehosts
  become: true

- name: Mount all volumes
  include_tasks: "./mount_volume.yml"
  loop: "{{ hostvars[inventory_hostname]['volumes'] }}"
  loop_control:
    loop_var: volume

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ common_packages|default([]) }}"
    update_cache: true
    state: present
  register: apt_res
  retries: 30
  delay: 30
  until: apt_res is success
  when: ansible_os_family == "Debian"


- name: Upgrade all packages (apt)
  apt:
    upgrade: dist
    autoremove: true
  when: ansible_os_family == "Debian"
  register: apt_res
  retries: 30
  delay: 30
  until: apt_res is success

# - name: "Enable {{ ntp_service }} service"
#   service:
#     name: "{{ ntp_service }}"
#     enabled: true
#   when: ntp_apply

# - name: Make sure the NTP service is stopped
#   service:
#     name: "{{ ntp_service }}"
#     state: stopped
#   when: ntp_apply

# - name: Force NTP sync
#   command: "{{ ntp_sync }}"
#   changed_when: false
#   when: ntp_apply

# - name: Start the NTP service
#   service:
#     name: "{{ ntp_service }}"
#     state: started
#     enabled: true
#   when: ntp_apply

# - name: Set ulimits limits
#   lineinfile: dest=/etc/security/limits.conf
#               insertbefore="^# End of file"
#               state=present
#               line="{{ item }}"
#   with_items:
#     - "* soft nofile 32768"
#     - "* hard nofile 32768"
#     - "* soft memlock unlimited"
#     - "* hard memlock unlimited"
#     - "* soft nproc 65536"
#     - "* hard nproc 65536"

# - name: Set swappiness to 1
#   sysctl:
#     name: vm.swappiness
#     value: "1"
#     state: present
#     ignoreerrors: true

# - name: Disable Transparent Huge Pages in Grub 2
#   lineinfile:
#     dest: /etc/default/grub
#     state: present
#     line: 'GRUB_CMDLINE_LINUX=$GRUB_CMDLINE_LINUX" transparent_hugepage=never"'
#   # when: ansible_distribution_major_version|int > 6
#   notify: run update-grub

# - name: Flush those handlers
#   meta: flush_handlers

# - name: Disable Transparent Huge Pages until reboot  # noqa ignore-errors
#   command: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
#   ignore_errors: true
#   changed_when: false
