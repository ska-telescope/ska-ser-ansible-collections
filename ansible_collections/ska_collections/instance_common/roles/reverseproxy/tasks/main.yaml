---
# Notes:
# https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/
# https://oak-tree.tech/blog/k8s-nginx-oauth2-gitlab

- name: Install packages required for virtualenv (apt)
  apt:
    name: ['virtualenv', 'python3-virtualenv']
    state: present

- name: create /etc/nginx directory
  file:
    path: /etc/nginx
    state: directory
    mode: 0644

- name: get /etc/nginx/dhparam
  get_url:
    url: 'https://ssl-config.mozilla.org/ffdhe2048.txt'
    dest: '/etc/nginx/dhparam'
    mode: '0440'
    force: true

- name: create NGiNX config
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    mode: "0644"
  register: nginxconfig

- name: "docker pull image for {{ nginx_container_image }}, {{ oauth2proxy_container_image }}"
  docker_image:
    source: pull
    name: "{{ item }}"
  with_items:
    - "{{ nginx_container_image }}"
    - "{{ oauth2proxy_container_image }}"
  register: nginximage

- name: nginx remove containers
  docker_container:
    name: "{{ item }}"
    state: absent
    stop_timeout: 60
    timeout: 120
    force_kill: false
  with_items:
    - "{{ nginx_name }}"
    - "{{ oauth2proxy_name }}"

- name: Get nginx container info
  docker_container_info:
    name: "{{ nginx_name }}"
  register: nginxinfo

- name: run oauth2proxy in a container  # noqa no-handler
  docker_container:
    name: "{{ oauth2proxy_name }}"
    image: "{{ oauth2proxy_container_image }}"
    pull: true
    command:
      - /bin/oauth2-proxy
      - --provider=azure
      - --client-id={{ oauth2proxy_client_id }}
      - --client-secret={{ oauth2proxy_client_secret }}
      - --oidc-issuer-url=https://sts.windows.net/{{ oauth2proxy_tenant_id }}/
      - --upstream=file:///dev/null
      - --http-address=0.0.0.0:4180
      - --cookie-secure=true
      - --redirect-url=https://{{ nginx_server_name }}/oauth2/callback
      - --skip-provider-button=true
      - --set-xauthrequest=true
      - --skip-auth-preflight=false
      - --email-domain=*
      - --pass-access-token
      - --pass-authorization-header
    env:
      OAUTH2_PROXY_CLIENT_ID: "{{ oauth2proxy_client_id }}"
      OAUTH2_PROXY_CLIENT_SECRET: "{{ oauth2proxy_client_secret }}"
      OAUTH2_PROXY_COOKIE_SECRET: "{{ oauth2proxy_cookie_secret }}"
    # restart: true
    recreate: true
    restart_policy: always
    state: started
    privileged: true
    network_mode: host
    exposed_ports:
      - "{{ oauth2proxy_port }}"
    labels: "{{ container_labels }}"
    log_driver: "{{ log_driver }}"
    log_options: "{{ log_options }}"
    volumes:
      - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/nginx/sdhp.stfc.skao.int.key:/etc/nginx/sdhp.stfc.skao.int.key:ro
      - /etc/nginx/sdhp.stfc.skao.int.crt:/etc/nginx/sdhp.stfc.skao.int.crt:ro
      - /etc/nginx/sdhp.stfc.skao.int-ca.crt:/etc/nginx/sdhp.stfc.skao.int-ca.crt:ro
      - /etc/nginx/dhparam:/etc/nginx/dhparam:ro

- name: run nginx in a container  # noqa no-handler
  docker_container:
    name: "{{ nginx_name }}"
    image: "{{ nginx_container_image }}"
    # restart: true
    recreate: true
    restart_policy: always
    state: started
    privileged: true
    network_mode: host
    exposed_ports:
      - "{{ ha_api_proxy_port }}"
      - "{{ nginx_https_proxy_port }}"
    labels: "{{ container_labels }}"
    log_driver: "{{ log_driver }}"
    log_options: "{{ log_options }}"
    volumes:
      - /etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/nginx/sdhp.stfc.skao.int.key:/etc/nginx/sdhp.stfc.skao.int.key:ro
      - /etc/nginx/sdhp.stfc.skao.int.crt:/etc/nginx/sdhp.stfc.skao.int.crt:ro
      - /etc/nginx/sdhp.stfc.skao.int-ca.crt:/etc/nginx/sdhp.stfc.skao.int-ca.crt:ro
      - /etc/nginx/dhparam:/etc/nginx/dhparam:ro
