---
# load shared vars with clusterapi
- name: Include vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_items:
    - ../clusterapi/defaults/main.yml
  tags: [always]

# https://github.com/kubernetes/cloud-provider-openstack/blob/master/docs/openstack-cloud-controller-manager/using-openstack-cloud-controller-manager.md#global

- name: Include the OS Config
  ansible.builtin.include_tasks: openstack-config.yml

- name: Encode Clusterapi cloud config and store as fact
  ansible.builtin.set_fact:
    capi_base64_cloud_config: "{{ slurped_cloud_config.content }}"

- name: Show capi_base64_cloud_config
  ansible.builtin.debug:
    var: capi_base64_cloud_config
  when: debug

- name: Check if kubectl is installed locally
  block:
    - name: Try using kubectl
      ansible.builtin.command: kubectl version --client
      delegate_to: localhost
      register: kubectl_check
      changed_when: false
      failed_when: kubectl_check.rc != 0

    - name: Kubectl installed
      ansible.builtin.debug:
        msg: OK - kubectl is installed locally

  rescue:
    - name: Kubectl not installed
      ansible.builtin.fail:
        msg: >
          "Could not find kubectl installed on localhost"

- name: Generate kustomized template
  ansible.builtin.shell: |
    cd {{ capi_resources_dir }};
    kubectl kustomize ./kustomize/overlay/{{ capi_kustomize_overlay }}/ > /tmp/{{ capi_cluster }}-cluster-template.yaml
  changed_when: false
  delegate_to: localhost

- name: Load CAPO Cluster Template
  ansible.builtin.slurp:
    src: "/tmp/{{ capi_cluster }}-cluster-template.yaml"
  register: slurped_cluster_template
  delegate_to: localhost

- name: Output cluster template file to server  # noqa: template-instead-of-copy
  ansible.builtin.copy:
    content: "{{ slurped_cluster_template.content | b64decode }}"
    dest: "{{ capi_config_dir }}/{{ capi_cluster }}-cluster-template.yaml"
    mode: 0644
  become: true

- name: Output cluster template file to local  # noqa: template-instead-of-copy
  ansible.builtin.copy:
    content: "{{ slurped_cluster_template.content | b64decode }}"
    dest: "{{ capi_resources_dir }}/templates/{{ capi_cluster }}-cluster-template.yaml"
    mode: 0644
  delegate_to: localhost

- name: Create temporary template directory
  ansible.builtin.tempfile:
    state: directory
    suffix: capo-template
  register: capi_capo_template_dir

- name: Setup environment
  ansible.builtin.set_fact:
    capi_cluster_environment:
      COLLECTIONS_BRANCH: "{{ capi_collections_branch }}"
      OCI_MIRROR_IP: "{{ nexus }}"
      KUBE_NAMESPACE: "{{ capi_kube_namespace }}"
      OPENSTACK_FAILURE_DOMAIN: "{{ capi_capo_openstack_failure_domain }}"
      OPENSTACK_IMAGE_NAME: "{{ capi_capo_openstack_image_name }}"
      OPENSTACK_CLOUD: "{{ capi_capo_openstack_cloud }}"
      OPENSTACK_CONTROL_PLANE_MACHINE_FLAVOR: "{{ capi_capo_controlplane_machine_flavour }}"
      OPENSTACK_DNS_NAMESERVERS: "{{ capi_capo_openstack_dns_servers }}"
      OPENSTACK_NODE_MACHINE_FLAVOR: "{{ capi_capo_node_machine_flavour }}"
      OPENSTACK_SSH_KEY_NAME: "{{ capi_capo_openstack_ssh_key_name }}"
      CAPO_CLOUD: "{{ capi_capo_openstack_cloud }}"
      OPENSTACK_EXTERNAL_NETWORK_ID: "{{ capi_capo_openstack_external_network_id }}"
      OPENSTACK_CLOUD_YAML_B64: "{{ capi_capo_ostack_cloud_yaml_b64 }}"
      OPENSTACK_CLOUD_CACERT_B64: "{{ capi_capo_cacert_b64 }}"
      CLUSTER_API_OPENSTACK_INSTANCE_CREATE_TIMEOUT: "{{ capi_capo_openstack_instance_create_timeout }}"
      BUNDLE_LOOKUP_TAG: "{{ capi_k8s_version }}"
      K8S_VERSION: "{{ capi_k8s_version }}"
      CALICO_VERSION: "{{ capi_calico_version }}"
      NETWORK_NAME: "{{ capi_capo_os_network_name }}"
      SUBNET_NAME: "{{ capi_capo_os_subnet_name }}"
      CIDR_BLOCK: "{{ capi_cidr_block }}"
      CALICO_IPV4POOL_CIDR: "{{ capi_cidr_block }}"
      IP_AUTODETECTION_METHOD: "{{ capi_calico_ip_autodetection_method }}"
      CALICO_IPV4POOL_IPIP: "{{ capi_calico_ipv4pool_ipip }}"
      HELM_VERSION: "{{ capi_helm_version }}"
      CONTROL_PLANE_COUNT: "{{ capi_controlplane_count }}"
      WORKER_COUNT: "{{ capi_worker_count }}"
      RUN_KUBELET_INSTALL: "{% if capi_capo_run_kubelet_install %}yes{% else %}no{% endif %}"

- name: Generate cluster
  ansible.builtin.shell: |
    clusterctl generate cluster {{ capi_cluster }} \
      --target-namespace {{ capi_kube_namespace }} \
      --kubernetes-version {{ capi_k8s_version }} \
      --control-plane-machine-count {{ capi_controlplane_count }} \
      --worker-machine-count {{ capi_worker_count }} \
      --from {{ capi_config_dir }}/{{ capi_cluster }}-cluster-template.yaml > {{ capi_capo_template_dir.path }}/{{ capi_cluster }}.yaml;
  environment: "{{ capi_cluster_environment | combine(capi_cluster_extra_vars) }}"
  changed_when: false
  register: capi_capo_template_result

- name: Show capi_capo_template_result
  ansible.builtin.debug:
    var: capi_capo_template_result
  when: debug

- name: Slurp CAPO cluster manifest
  ansible.builtin.slurp:
    src: "{{ capi_capo_template_dir.path }}/{{ capi_cluster }}.yaml"
  register: slurped_cluster_instance_manifest

- name: Unpack CAPO cluster manifest
  ansible.builtin.set_fact:
    capi_cluster_manifest: "{{ slurped_cluster_instance_manifest.content | b64decode }}"

- name: Remove local manifest copy ./resources/clusterapi/manifests/*-cluster-manifest.yaml
  ansible.builtin.file:
    path: "{{ capi_resources_dir }}/manifests/{{ capi_cluster }}-cluster-manifest.yaml"
    state: absent
  delegate_to: localhost

- name: Check if a previous manifest exists
  ansible.builtin.stat:
    path: "{{ capi_resources_dir }}/manifests/{{ capi_cluster }}-cluster-manifest.yaml.applied"
  register: previous_cluster_manifest
  delegate_to: localhost

- name: Output cluster manifest file  # noqa: template-instead-of-copy
  ansible.builtin.copy:
    content: "{{ capi_cluster_manifest }}"
    dest: "{{ capi_resources_dir }}/manifests/{{ capi_cluster }}-cluster-manifest.yaml"
    mode: 0644
  delegate_to: localhost

- name: Apply cluster manifest
  when: capi_apply_manifest | bool
  block:
    - name: Read previously applied manifest
      ansible.builtin.set_fact:
        capi_previous_cluster_manifest: "{{ lookup('ansible.builtin.file', previous_cluster_manifest.stat.path) }}"
      when: previous_cluster_manifest.stat.exists

    - name: Show manifest differences
      ansible.utils.fact_diff:
        before: "{{ capi_previous_cluster_manifest }}"
        after: "{{ capi_cluster_manifest }}"
      when: previous_cluster_manifest.stat.exists

    - name: Validate manifest changes
      ansible.builtin.pause:
        prompt: "Do you want to apply this manifest? [yes/no]"
        echo: true
      register: validate_manifest_apply
      when: previous_cluster_manifest.stat.exists and capi_apply_manifest_review_diff

    - name: Abort manifest changes before apply
      ansible.builtin.fail:
        msg: "Aborting manifest apply. To really do it, say 'yes' on the prompt"
      when: previous_cluster_manifest.stat.exists and capi_apply_manifest_review_diff and validate_manifest_apply.user_input != 'yes'

    - name: Apply CAPO Cluster manifest
      kubernetes.core.k8s:
        state: present
        apply: true
        src: "{{ capi_capo_template_dir.path }}/{{ capi_cluster }}.yaml"

    - name: Output cluster manifest file  # noqa: template-instead-of-copy
      ansible.builtin.copy:
        content: "{{ capi_cluster_manifest }}"
        dest: "{{ capi_resources_dir }}/manifests/{{ capi_cluster }}-cluster-manifest.yaml.applied"
        mode: 0644
      delegate_to: localhost

    - name: Wait for workload cluster to be ready
      block:
        - name: Wait Cluster
          kubernetes.core.k8s_info:
            kind: Cluster
            api_version: cluster.x-k8s.io/v1beta1
            namespace: "{{ capi_kube_namespace }}"
            name: "{{ capi_cluster }}"
            wait: true
            wait_timeout: "{{ capi_capo_openstack_instance_create_timeout }}"
            wait_condition:
              type: Ready

        - name: Wait MachineDeployment
          kubernetes.core.k8s_info:
            kind: MachineDeployment
            api_version: cluster.x-k8s.io/v1beta1
            namespace: "{{ capi_kube_namespace }}"
            label_selectors:
              - "cluster.x-k8s.io/cluster-name = {{ capi_cluster }}"
            wait: true
            wait_timeout: "{{ capi_capo_openstack_instance_create_timeout }}"
            wait_condition:
              type: Ready
      when: capi_apply_wait | bool

- name: Remove the temp template directory
  ansible.builtin.file:
    path: "{{ capi_capo_template_dir.path }}"
    state: absent
  when: capi_capo_template_dir.path is defined

- name: Flush those handlers
  ansible.builtin.meta: flush_handlers
